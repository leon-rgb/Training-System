genauigkeit innerhalb des cutting planes:
	Punkte ca 100 - 1000 Stück innerhalb des cutting planes erzeugen (alle reihenweise zu den punkten der curve) mit object pooling
		Punkte --> empty gameObjects
		Punkte in einem abstand von (1 / Punkte pro Reihe) erzeugen  
		punkte pro reihe = dist(curvePoint, korrespondierenem point in der gerade) / 0.05f 
			--> 0.05f da das der length coefficient vom mesh generator leg ist.
		jeder punkt soll ein skript attached haben, das überprüft ob es von der saw getroffen wurde (getroffen wird approximiert durch distanz berechnung)
			--> prefab für di epunkte erstellen

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
alle variablen und textsetzungen in main script auslagern
--> dann verzweigung in cutting accuracy entfernen

Funktion für total accuracy:
Idee ist kreiren einer Funktion f(x), wobei x = errors * TooDeepLength

-0.0006x^2 + 0.0002x + 1 --> sinkt vlt zu schnell 


---->>> 5.08219*10^-22x^4 + 0.00003*x^3 - 0.00194*x^2 + 0.00091x + 1
Aus Erfahrungswerten (der kombination aus err anzahl + max err length/deepness) habe ich die Punkte (x,y) erstellt
p1 = (0,1), p2 = (5,0.96), p3 = (20,0.5), p4 = (35,0.04), p5 = (40, 0) 
--> Soll am anfange nicht ganz so schnell sinken und am ende schnelll
mit diesen habe ich am Computer eine Newton Interpolation durchführen lassen und bin zu dem obenstehenden Ergebnis gekommen.

Newton interpolation: https://www.mathworks.com/matlabcentral/fileexchange/7405-newton-s-interpolation 
		      https://www.mathworks.com/matlabcentral/fileexchange?q=newton+interpolation
--> schauen ob wir in statstoch bzw eher numerik selbst eine geschrieben haben
-->https://ilias3.uni-stuttgart.de/goto_Uni_Stuttgart_fold_2054269.html



//6.22222*10^-7*x^4 - 0.00005x^3 + 0.00070x^2 - 001033x +1



Object pooling
https://learn.unity.com/tutorial/object-pooling?signup=true#
https://www.youtube.com/watch?v=tdSmKaJvCoA
	


fixed:
-bones timeout erstellen (waveformtrigger)
-movedCurveVertices fixen --> falschrum oder so (cuttingaccuracy)
	--> default wert ist 6 (von 20)
-InfoTexts aufteilen in statischen und dynamischen text (dyn. = value)
-holosaw movement verbessern 
	+wieder einbauen, dass holosaw je nach haltung der saw rechts oder links rotiert ist
	+Geschwindigkeit des movement abh. von distanz machen 
	+wenn saw zu weit weg von holosaw, soll diese stoppen bis man wieder nah genug ist + Farbänderung
-holo saw winkel/abstand zu streng
-raum designen
-button um holosaw zu deaktivieren
-alles stoppen wenn cutting plan accuracy 100% ???
-weiteres cutting plane erstellen
-am ausgang game verlassen
-am pc einstellungen oder nächstes cutting plane laden 
-go to next button (später für user study)
-editor mode fürs cuttting plane
	--> punkte nachdem maus losgelassen war, alle auf die selbe z position bringen (am besten auswahl in dem ui ob es aktiviert sein soll)
	--> movedCurveVertices müsen noch neu berechnet werden
	--> Ui anzeigen, dass die keybindings zeigt und in welchem man speed anzeigen kann, plane speichern kann,...
	--> cutting planes sollen gespeichert werden
	--> cuttings planes sollen geladen werden können (per name etc)
	--> wäre cool wenn ein Bild des Cutting planes angezeigt werden würde
	--> möglich machen, dass man animation für holo saw generieren kann
-menu mit settings 
	--> points im cutting plane visualisieren an/aus
	--> häufigkeit von haptischen feedback
	--> schwierigkeit für accuracy einstellen
	--> entfernung der cutToDeep Punkte zum cutting plane
	eventuell:
	--> gravity an/aus
	-->update accuracy timeout zum performance sparen
-exit und switchtocuttingplanecreation an SG anpaassen
-saw rotation/pivot anpassen für sawanimation scrip an saw von holosaw
-saw mit sg greifen/testen
-SG haptic feedback ebenfalls nur von einer hand senden.
-cc hinzufügen (camera)
-projekt aufräumen
-scripte umschreiben/variablen umbennenen die aus dem internet inspiriert sind
-lightmaps neu erstellen. (gemacht für SG, ist aber buggy)
-code kommentieren


TODO / Ideas

xingayao fragen wie man surveys / questionaires findet
build machen und testen



Links: (aus uni)
file:///C:/Users/leonv/Desktop/SG_Unity_Doc_v2_2/class_s_g_1_1_s_g___grab_script.html
file:///C:/Users/leonv/Desktop/SG_Unity_Doc_v2_2/class_s_g_1_1_s_g___interactable.html#a0f3e56bf0b1495d07fddcfc36871bfff
https://docs.unity3d.com/Packages/com.unity.xr.management@4.0/manual/EndUser.html
https://www.screentogif.com/



WICHTIG FÜR EXPERIMENT:
Auch wenn programm als 2in1 funktioniert, einen ordner für controller und einen für gloves erstellen, damit experiment data getrennt ist.

NasaTLX ein mal für controller und ein mal für gloves,
aber was ist mit SUS, auch für beides?
Interview dann mit fragen zu beidem...


Hypothesen:

zu automatisiert generierten Daten vom Programm:
	-die Genauigkeit ist mit den Controllern signifikant höher

zum SUS:
	-die usability beider systeme unterscheidet sich signifikant
		--> handschuhe unhandlich, kabel nervig, relativ hohes Gewicht
	
zu NasaTLX:
	-die Arbeitsbelastung mit den Handschuhen ist höher
	-die kognitive Belastung beider Systeme ist gleich (unterscheidet sich nicht signifikant)
	-die physikalische Belastung ist bei den Handschuhen höher 

zum interview:
	-die handschuhe erzeugen eine höhere Immersion
	-längere Benutzung ist mit controllern angenehmer (-> controller alltagstauglicher)
	-beide Systeme motivieren das Interesse die eigenen chirurgischen Fähigkeiten zu trainieren.
	
	
	
Experiment:

	UV: 
		- Art der Interaktion: Controller und Gloves

	AV:
		- Accuracy
		- usability / subjective satisfaction
		- workload (physical and cognitive)
	
	Design: 
		-within-group
		
	8 Probanden